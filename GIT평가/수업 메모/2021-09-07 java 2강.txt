2021-09-07 화 java 2강

- 디지털 디자인: 디지털 논리회로 설계 (디자인=설계)
- 디지털 컨버전스(디지털장치가 결합된다, mp3, pmp)
  => IT 컨버전스, 융합 SW소프트웨어

// 자바 개발자는 디자이너(설개자)
// SW 설계 -> 구조(structure)를 만드는것
// 디자인 (design) : 코드레벨, low-level
// 아키텍트 (Architect) : 시스템레벨, high-level

1. 여러개 찍어내기 위한 기능
//왜 설계하나? 클래서 구조로 객체를 만들어 내기 위해
// 재사용성의 관점 -> 같은 구조로 여러개 만들자
// 예) 학사관리 시스템 -> 수강신청, 시간표, 담당교수
		     -> 여러명의 학생정보
		     -> 기본 데이터 그리고 기능이 같음
			// 학생(Student) 클래스를 만들고 찍어냄 (instance)
		     -> 이름, 나이, 연락처, 학과, 학기....
		     -> 기능: 수강신청, 시간표조회....

2. 데이터 정보 기능을 분리 
// 데이터, 정보, 기능을 분리해야함
// 여러명의 개발자가 같이 개발가능함
// A개발자: 학생정보 관리하는 기능을 개발
// B개발자: 수강신청 기능을 개발
// C개발자: 교수, 학과 등의 정보를 관리하는 기능

// 클래스의 개념:
학생정보, 사람정보, 제품정보, 회원정보, 사용자 정보
// 객체 개념:
학생, 사람, 제품, 회원, 사용자 (같은 이름의 클래스를 참조)



OOP: 
부품 객체를 먼저 만들고 하나씩 조립해서 완성된 프로그램을 만듬
프로그램을 만들때 여러번 나눠서 만듬 - 규모가 크기때문

객체:
물리적으로 존재하는것


인스턴스화, 인스턴싱 (instancing) :
하나로 여러개를 많이 생산함


Student s1 = new Student( );   <= 인스턴스 생성
Student.class   <= 객체

클래스 이름은 Pascal Case : 대문자로 시작

//
필드 : 클래스 내부의 변수 (속성 attribute)
객체 관점에서 데이터나 값이 저장되는 곳
필드 선언: 변수 선언이랑 똑같음


// 자바스크립트에선 객체 생성시 구조가 필요 없었음
let todoItem = {
  id:1,
  memo: "asdfgasfd"
}
// 속성추가
todoItem.isDone = false


// 생성자
// Student( )  : 생성자 메서드
// 객체를 생성하는 메서드인데
   상황에 따라거 매개변수가 없을 수도, 2개, 4개
Student( ),
Student( "smith", 90 ), 

spec(specification):구현한 내용에 대한 며에





// UML (Unified Modeling Language):
통합적인 설계언어
국제표준지정, 설계방법

// Forward Engineering
설계 -> 코드

// Reverse Engineering
코드 -> 설계





// Class Diagram
-----Class Diagram 예시
Member class 객체를 MemberExample에서 생성(instantiation)
: 클래스 - 구조
: 객체, 인스턴스 - 구조로 만들어 낸것

// class Diagram
1. 클래스의 캡슐화(encapsulation)를 표현
  - 캡슐화 : 필드, 메서드로 클래스를 표현 (자바) 
     -> 공학적인 일반화 : 속성, 기능으로 구조를 만듬

2.  클래스 간의 관계(relationship)를 표현한다.
  - Depaendancy(의존관계) : 클래스 변동사항이 다른 클래스에 영향을 미침
      => 클래스를 변경하면 그 클래스를 가져다 쓰는 쪽에 영향을 미침
             - 예) MemberExample 이 Member 클래스에 의존성이 있음
      => Member클래스를 수정하면 MemberExample에 영향을 미칠 수 있음

      => 자바(코드): 
               1. 메서드에서 다른 클래스 객체를 생성해서 사용함(의존관계)
                     예) Member class 객체를 
               2. 메서드에서 매개변수로 다른 클래스 객체를 받음

 - 의존 객체를 외부에서 생성해서 메서드 매개변수로 넣어줌
  : 의존성 주입 (Dependency Injection
) 
 - UML표기법은 ---> 
 - <<instantiate>> , <<use>> : 스테레오 타입 ( stereo type )
   -> 기본 UML 표기법 외에 추가적인 내용을 표기하는 방법



// Static 멤버:
 - 클래스에 고정된 정적인



// 
A사람(아키텍트) - 클래스 설계 : UML, Class Diagram
B사람(공동모듈개발) - 클래스 구현 : Calculator
    -> 코드에 대한 테크니컬한(OOP, Design Pattern) 이해도 높은 사람
    -> 의존성 때문에 이걸 고치면 다수의 코드들에 문제가 생길 수 있음
C사람(서비스 모듈 개발) - 클래스 사용 : CalculatorExample 
    -> 비즈니스에 대한 이해도가 높은 사람




