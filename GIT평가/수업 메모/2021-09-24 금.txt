2021-09-23 목 spinner 추가


Reactive: 반응성
  -  변수값이 바뀌면 부가적인 처리를 하자

변수에 모니터링 ( 구독 subscribe ) 할 수 있는 뭔가를 부착 - useSelector , 특정 state를 감지하는 것
바뀌면 렌더링처리 일어남, 안바뀌면 안일어남.

메모이징, 
실무에서 useEffect 자주씀 - 비동기 처리


// 프론트엔드 작업 순서
 1. UI 템플릿을 만듬
 2. 데이터 구조를 만듬 ( state )
 3. UI 템플릿과 데이터를 연결함 ( binding )





===========================================================

2021-09-24 금  DB SQL



// 1. Amazon RDS 데이터베이스 생성 ,  기본 옵션
   postgres
   password123!

- 스토리지 자동 조정 해제
- 퍼블릭 액세스 > 예
- 자동 백업 활성화 > 해제
- 성능 개선 도우미 활성화 > 해제


 * DBeaver 설치
       - 상단메뉴 > 데이터베이스 > 새 데이터베이스 연결 > PostgreSQL > 다음
       - DB연결설정 > Host > 엔드포인트 복붙 > Database지움 > 밑에 Username, Password (DB생성할때 만든거) 입력 > 완료
   


// 2. RDS 데이터 베이스 데이터베이스 접속
   
 DBeaver 에서
      - database-1 우클릭 > SQL편집기 >  SQL편집기 ( F3 )
      - 실행 명령어  :  1) create database myworkspace;   +  Ctrl enter
		 2) create schema myworkspace;  +  Ctrl enter


// 3. Spring - Database 연동
 1) Spring Starter Project (새프로젝트 생성)
      - 이름 설정 후 next -> Available 설정
      - 기본으로 Spring Boot DevTools , Lombok , Spring Data JPA , PostgreSQL Driver , Spring Web 설정

 2) myworkspace 에서   src/main/resources  기존 applicaton파일 지우고
      -  resource 위치에서 새 파일
      -  application.yml  (야믈 파일) - 시스템 설정파일로 많이 씀
	= 앞 두칸 띄어쓰기, 계단식 작성
	= #쓰면 주석 작성
	= ; 세미콜론 단위로 작동됨


          # jdbc - java databse connector
          # :postgresql - 데이터베이스 엔진
          # //url (//database-1.caip~) - 데이터베이스 주소 url
          # :5432 - 데이터베이스 접속 포트
          # /postgres - 접속할 데이터베이스(이름)
          # jdbc를 이용해 postgresql포트의 데이터베이스로 접속한다

-----------------------------------------------------------------------------------

// MySQL로 데이터베이스 생성

마스터 사용자
admin
password123!


MySQL schema = Database 동일한개념 , 물리적인 개념 없음
   => Database가 하나의 파일로 생성됨



-----------------------------------------------------------------------------------

// Spring Data JPA ( Java Persistence API, 자바 영속화 API )
// 영속화 : 휘발성 데이터를 비휘발성 장치로 저장하는 것
  ex)  자바 객체 (RAM) -> 테이블 레코드 (파일내부 특정값)

기법 : ORM ( Object Relational Mapping )
    => 객체를 테이블과 맵핑한 것을 가리킴
        1) 객체 지향으로 개발할 수 있게함 ( 소프트웨어공학 위주 )   ,  데이터 엔진 요소는 적게 -DB에 종속되지 않게 
        2) 특정 DB에 종속되지 않게 함 (자바 코드를 MySQL , postgreSQL 등등에 맞출 필요 없도록 함)

** JPA -> Hivernate -> MySQL / PostgreSQL

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

	@Entity
	  - 테이블과 클래스를 맵핑함
	     기본 방법은 Photo(pascla-case) -> photo(snake-case)
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)

import org.springframework.beans.factory.annotation.Autowired;

	@Autowired
	  - Repository 인터페이스 구조에 맞는 ( 매개변수나 필드 타입에 맞는 ) 객체를 Spring 에 생성하여 주입하여줌
	  - 의존성 주입, 의존객체 주입,  DI ( Dependency Injection )


//------------------- database schema 개념--------------------------------------------
  
  schema : 데이터베이스 객체들의 집합

  물리적인 개념 ( 디스크 공간 ) - 데이터 저장
    - table space

  논리적인 개념 ( 데이터 구조 )
    -   database   >    schema    >   table
    최상위 논리개념  >  하위 데이터 구조  > 기능
  시스템명, 사용자명(명칭) > 애플리케이션명(서비스) > 기능(객체구조)

** 실제 데이터는 table에 저장됨 -> table space 공간에 물리적인 파일로 저장
** table은 엑셀과 같다고 보면됨  -  관계형 데이터베이스

ex)  naver > blog > post , comment, like ...
      naver > news > article , comment , like ...


  ** DB 구조 이렇게 만들 것 - schema 기준으로 나눠져있음
     postgres > myworkspace > photo, contact
                    commerce > purchase_order, purchase_order_product
                    salse > salse_order, product
                    analysis > 



---------------------------

  ** DB종류에 따라 schema구조 다름

물리적 개념 (디스크 공간)
 - table space : Oracle , PostgreSQL 만 있음
 - database : MySQL (MariaDB 포함) , SQL Server

논리적 개념(데이터 구조)
                  database > schema > table
PostgreSQL : 사용자(시스템) > 애플리케이션(서비스) > 기능(객체구조)
Oracle :  시스템 > 사용자(애플리케이션) > 기능(객체구조)
MySQL :  databse=schema
            사용자(애플리케이션) > 기능(객체구조)
SQL Server : 시스템 > 사용자(애플리케이션) > 기능(객체구조) 
    




------------------------------------------------------

// table - 실질적인 데이터 저장공간
// 관계형 데이터 베이스 (Relational Database)
   -  RDBMS ( 관계형 데이터베이스 관리시스템, 소프트웨어 )
          => PostgreSQL ( 여러종류 중 하나 )
   -  데이터 저장 공간의 테이블 (table)
          => 행 (row , record) / 열 (column , field) 구조
   -  1개의 행이 1건의 데이터임
   -  1개의 열이 속성 1개 ( attribute, prop, field )  한개


-------------------------------------------------------

-- 테이블 생성 명령어 (자동으로 생성되서 잘 쓰진 않음)
/* create table 테이블명 (
 * 	  컬럼명 컬럼타입 옵션,
 *    컬럼명 컬럼타입 옵션,
 *    컬럼명 컬럼타입 옵션, ...
 * )
 * */

-- pk(primary key) : 주키
-- 유일성과 최소성을 보장하는 컬럼
-- 유일성: 전체 테이블 데이터에서 유일한 값을 가짐(사용자id, 이메일, 주민등록번호)
-- 최소성: 최소의 컬럼 개수와 크기로 구성되어있음
-- PK 값만 알면 데이터 1건을 찾을 수 있음

create table photo (
	id int8 generated by default as identity, 
	created_time int8 not null, 
	description varchar(255), 
	file_name varchar(255), 
	file_type varchar(255), 
	photo_url TEXT, 
	title varchar(255), 
	primary key (id)
)

	   -- 컬럼명 컬럼타입 [그외 옵션]
	   -- generated by default as identity : 자동 증가되는 값 (1,2,3,4...)
	   -- description varchar(255) : 가변길이 문자열 255 바이트


-------------DBeaver  CRUD 명령어 feat. photo -----------------------------------------


▶CREATE
             테이블명 ( col1, col2, col3, .....)                                                           ( 값, 값, 값 ..... )
insert into photo (created_time, description, file_name, file_type, photo_url, title) values (?, ?, ?, ?, ?, ?) ;




▶READ

     col목록      테이블명
select   *   from photo;
    => 전체목록 조회

** photo테이블 전체 조회
select 
	photo0_.id as id1_0_, 
	photo0_.created_time as created_2_0_, 
	photo0_.description as descript3_0_, 
	photo0_.file_name as file_nam4_0_, 
	photo0_.file_type as file_typ5_0_, 
	photo0_.photo_url as photo_ur6_0_, 
	photo0_.title as title7_0_ 
from photo photo0_;




▶UPDATE
 ** 텍스트는 작은따옴표 ' '
 ** where 로 어느 id 수정할건지 선택

ex)
         테이블명
update photo set 
	created_time=1, 
	description='새로운 설명', 
	file_name='파일명', 
	file_type='...', 
	photo_url='...', 
	title='새로운제목' 
where id=5 ;



▶DELETE
 **** where 조건이 없으면 전체 데이터가 삭제됨, 조심할 것
where id = 숫자, [ id = 숫자 ] 에 연산식 올 수 있음.  <= , >= , 5-1 , 4+4 , !=  등등

              테이블명
delete from photo where id = 5;


====== constact DB연동하기====================

Spring contact 에서
1. Contact  <=  class  어노테이션 붙여
	@Entity , @Id , @Column

2. ContactRepository  만들어

3. ContactController 에서 Repository 주입하기
	 생성자 만들기  <= private ContactRepository repo;

4. findAll( ) , save( entity ) , findById( id ) , deleteById( id )

-------------------------------------------------------

// CMD 명령어

ipconfig / all  - 윈도우즈
ifconfig / all  - 리눅스, 맥
  IPv4 주소 : 192.168.00.00
   => 공유기 ip 주소 볼수 있음




VPC ( vertual private cloud )

▶사설IP대역 - 공유기에 연결된 내부 인터넷, 외부 접근 불가
10.0.0.0~10.255.255.255
172.16.0.0~172.31.255.255
192.168.0.0~192.168.255.255

▶공인IP대역 - 공유기 사용안함, 외부 접근 가능, 공개됨
0.0.0.0~127.255.255.255
128.0.0.0~191.255.255.255
192.0.0.0~233.255.255.255
224.0.0.0~239.255.255.255
240.0.0.0~255.255.255.255



// Base64 : data URL 파일
장점
  서버에서 파일 읽고, 처리하고, 별도디스크에 저장, 권한제어 안해도 됨.

단점
  파일이 1.33배 용량이 커짐 


===== 용어 ========================================

// Spring Data JPA
  - Persist data in SQL stores with Java Persistence API using Spring Data and Hibernate.
   (데이터 영속화)


// PostgreSQL Driver
  - A JDBC and R2DBC driver that allows Java programs 
     to connect to a PostgreSQL database using standard, 
     database independent Java code.












