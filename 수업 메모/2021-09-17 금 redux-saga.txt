2021.09.17  금   redux-saga 


// Redux Saga  - redux middleware중에 가장 많이 쓰는 것.
  : Redux side effect manager
  : Redux 의 사이드 이펙트 관리자
  : Redux 의 사이드 이펙트   = 우리가 원치 않는 새로운 처리
   -> Redux 상태를 변경하기 이전/이후에 처리해야되는 추가적인 로직 (사이드이펙트)
       : Redux 상태변경 이전  (처리중입니다, 뺑글이, 막대바 표시 등의 작업)
      -> 주로 서버와의 통신 ( 비동기처리 ) - 데이터베이스 저장
      -> 로컬스토리지, indexDB와 같은 브라우저 스토리지 처리
      -> 파일처리 ( 비동기 )

       : Redux 상태 변경 이후
      -> 처리중입니다... 제거
      -> 에러가 있다면 에러메시지 표시



// Redux 상태 Persistence Strategy (영속화 전략)
  : 영속화 -> RAM ( 휘발성 )  -> 디스크 ( 비휘발성 )


// 웹
1. Redux 상태를 브라우저 저장공간 저장 ( localstorage, indexedDB )
2. Redux 상태를 서ㅂ를 통해서 원격에 있는 데이터베이스에 저장

// 모바일앱
3. Redux 상태를 모바일 장치의 디스크에 저장 ( asyncStorage )

// PC
4. Redux 상태를 PC 장치의 디스크 (File) 또는 내장 데이터베이스 ( SQL lite ) 저장


1. Asynchornous ( 비동기 )
ES6 generators make asnchronous flows easy to read, write, and test.
Create complex side effects without getting bogged down by the details.
     -> 비동기적인 처리 작업의 직렬화 ( Serialization )



// Saga Pattern
   : 작업 ( Task, Trasaction ) 의 처리순서를 보장하기 위한 아키텍쳐
   : 예) 작업을 Queue에 넣고 먼저 들어온 작업을 실행



// Promise 객체는 상태가 3개
  : "pendng", "fullfilled", "rejected"











========용어 정리=====================================================

// Redux 상태 Persistence Strategy (영속화 전략)   영속화

// Asynchornous ( 비동기 )















 