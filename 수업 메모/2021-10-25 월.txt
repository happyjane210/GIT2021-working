2021-10-25 월

내일까지
*** 분석 단계
@ // Use Case Diagram
유즈케이스 (다이어그램) 작성  - 기능별로 작성

// Use Case 명세서
유즈케이스 명세서 작성
  - 선행조건

// Analysis Object Model - 분석 객체 모델
---------------------------------------------------------------------
수
설계 단계
// UI Prototyping (UI 설계 - 발사믹, 젠킨스, 파워목업-파워포인트 툴)
// Class Diagram (백엔드 클래스 설계)
// Component / Deployment Digram (인터페이스 설계)
---------------------------------------------------------------------

// 테스트 케이스
basic flow
  - alternative flow
  - exception flow

컨트롤러 , 서비스 등등

** 목업
우선 코드 구현할때 return null로 만들기.


// 하위 객체
 ex) 연락처 밑에 댓글 등
      제품 상세 안에 원두 찜하기

repogitory 는 엔티티 하나 당 한개씩 있어야함

hitahoe==  '




*** react 왜쓰냐

dom : html을 객체화 한 것
   - 랜더링을 할때마다 실체화되있기 때문에 램을 사용함
   - 일부 수정하면 처음부터 다시 그림

virtual dom (가상 공간의 돔트리)
   - 이걸 쓰려면 JSX이 필요함
   - 가상공간에 렌더링을 해놓고
   - 일부 수정하면 수정한 부분만 리렌더링됨 (램을 덜 잡아먹고, 효율적임)

JSX ( Javascript XML )
   - 겉모습만 html 테그인 javascript 코드 => 컴파일하면 js로 컴파일됨.
   - 리엑트에서 JSX가 컴파일되면서 가상돔에 등록됨
       => 그게 리액트

SPA ( single page application )
   - 화면 로딩에 필요한 리소스를 초기에 모두 다운받는다.
   - 한번 렌더링한 화면이 메모리레 저장되어서 다른곳으로 이동 후 돌아왔을 때
     오래걸리지 않고 바로 로딩이 가능함
       => 초반에 로딩하는데 시간이 오래걸림

lazy loading
   - SPA의 초기 로딩속도가 오래걸리는 단점을 보완하는 기법
   - lazy loading 을 걸어놓으면 내가 클릭하기 전까지 로딩하지 않음

Module
react 에서 import와 export 를 사용하여 코드를 내보내기, 불러오기 하여
여러곳에서 재사용이 가능하게 하는 작업방식 (코드의 재사용 용이)

fuction component (함수형 컴포넌트)
하나의 함수 리턴값이 컴포넌트의 기능이 되는것 ( return 안에 JSX )
** 자매품 class component


컴포넌트 생명주기 ( Component Lifecycle ) 
   - 윌마운트 : 다른 컴포넌트에서 <컴포넌트 />로 넣은 것이 기능을 하기 전
   - 마운트 : 다른 컴포넌트에서 임포트 된 후 <컴포넌트 />로 넣은 것이 기능을 할 때 ex) useEffect효과 등
   - 언마운트 : 함수가 다 돌아가서 마운팅에서 빠지는 것















